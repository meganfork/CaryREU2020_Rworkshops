Dogs <- read.csv("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/Dogs.csv", stringsAsFactors=FALSE)
View(Dogs)
?rm
ls()
rm(list = ls())
?read.csv
?read.xls
?read.xl::read.excel
?readxl::read.excel
??read.xl
?read_excel
?read.xlsx
DogData <- read.csv("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/Dogs.csv", stringsAsFactors=FALSE)
typeof(DogData$text)
colnames(DogData)
head(DogData)
typeof(DogData$rating_numerator)
typeof(DogData$date_time)
DogData2 <- read.csv("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/Dogs.csv", stringsAsFactors=T)
typeof(DogData2$text)
unique(DogData2$text)
getwd()
Dogs <- read.csv("Dogs.csv", stringsAsFactors=FALSE)
setwd("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/REU_R_workshop2/")
rm(list = ls())
library(c(dplyr,
lubridate))
lapply(c(dplyr,lubridate), library)
lapply(c('dplyr','lubridate'),library, character.only = TRUE)
getwd() # Ask what your current working directory is set to
setwd("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/REU_R_workshop2/")
DogData <- read.csv("Dogs.csv", stringsAsFactors=FALSE) # NOTE that this will OVERWRITE the existing object named "DogData"
setwd("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/REU_R_workshop2/")
DogData <- read.csv("Dogs.csv", stringsAsFactors=FALSE)
getwd() # Ask what your current working directory is set to
setwd("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/REU_R_workshop2/")
DogData <- read.csv("Dogs.csv", stringsAsFactors=FALSE) # NOTE that this will OVERWRITE the existing object named "DogData"
nrow(DogData)
View(DogData)
lapply(c('tidyverse','lubridate'),library, character.only = TRUE)
is.na(DogData$name) %>% # the function 'is.na()' returns a vector of logical (i.e., True/False) for each entry in the input that tells you whether the value is NA or not. The pipe operator (" %>% ") lets us feed this output into another function:
which() %>% # Feeding the above into "which()" returns the positions of the "NA" observations
length() # Length returns the number of observations in the vector - i.e., how many cells have 'NA' in them
DogData <- read.csv("Dogs.csv", stringsAsFactors=FALSE, na.strings = "")
setwd("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/REU_R_workshop2/")
DogData <- read.csv("Dogs.csv", stringsAsFactors=FALSE, na.strings = "")
is.na(DogData$name) %>% # the function 'is.na()' returns a vector of logical (i.e., True/False) for each entry in the input that tells you whether the value is NA or not. The pipe operator (" %>% ") lets us feed this output into another function:
which() %>% # Feeding the above into "which()" returns the positions of the "NA" observations
length()
unique(DogData$rating_denominator)
DogData[(which(DogData$rating_denominator) == 15), ]
DogData[which(DogData$rating_denominator == 15), ] # here, we ask R to display the row(s) of the object "DogData" for which the value of "
DogData.munge <- DogData[-which(DogData$rating_denominator == 15), ]
unique(DogData$rating_numerator)
unique(DogData.munge$rating_denominator)
DogData[which(DogData$rating_numerator <= 10), ]
DogData.munge[which(DogData.munge$rating_numerator < 10), ]
DogData.munge$rating_numerator[which(DogData.munge$rating_numerator < 10)] <- 13.5
View(DogData.munge)
unique(DogData.munge$dog_class)
DogData.classSummary <- DogData.munge %>% # We'll create a new object with the summarized dog data by class. Remember, the pipe operator (" %>% ") lets us feed the output of one function into the next.
group_by(dog_class) %>% # We ask R to group our data according to the class of dog
dplyr::summarise(count = dplyr::n, min.rating = min(rating_numerator), max.rating = max(rating_numerator), average.rating = mean(rating_numerator))
DogData.classSummary <- DogData.munge %>% # We'll create a new object with the summarized dog data by class. Remember, the pipe operator (" %>% ") lets us feed the output of one function into the next.
group_by(dog_class) %>% # We ask R to group our data according to the class of dog
dplyr::summarise(n = dplyr::n, min.rating = min(rating_numerator), max.rating = max(rating_numerator), average.rating = mean(rating_numerator))
DogData.classSummary <- DogData.munge %>% # We'll create a new object with the summarized dog data by class. Remember, the pipe operator (" %>% ") lets us feed the output of one function into the next.
group_by(dog_class) %>% # We ask R to group our data according to the class of dog
dplyr::summarise(dplyr::n, min.rating = min(rating_numerator), max.rating = max(rating_numerator), average.rating = mean(rating_numerator))
DogData.classSummary <- DogData.munge %>% # We'll create a new object with the summarized dog data by class. Remember, the pipe operator (" %>% ") lets us feed the output of one function into the next.
group_by(dog_class) %>% # We ask R to group our data according to the class of dog
dplyr::summarise(min.rating = min(rating_numerator), max.rating = max(rating_numerator), average.rating = mean(rating_numerator))
View(DogData.classSummary)
DogData.classSummary <- DogData.munge %>% # We'll create a new object with the summarized dog data by class. Remember, the pipe operator (" %>% ") lets us feed the output of one function into the next.
group_by(dog_class) %>% # We ask R to group our data according to the class of dog
dplyr::summarise(count = dplyr::n(), min.rating = min(rating_numerator), max.rating = max(rating_numerator), average.rating = mean(rating_numerator))
filter(DogData.munge, !is.na(name))
DogData.named.classSummary <- filter(DogData.munge, !is.na(name)) %>% # Here, we can use the funtion "filter()" to take a subset of observations that meet a set of logical criteria, such as the name NOT being NA
group_by(dog_class) %>% # same as above, but using the filtered data
dplyr::summarise(count = dplyr::n(), min.rating = min(rating_numerator), max.rating = max(rating_numerator), average.rating = mean(rating_numerator)) # Ditto
View(DogData.named.classSummary)
?pairs
pairs(DogData.munge[, -c("text","name")])
DogData.munge[, -c("text","name")]
dplyr::select(DogData.munge, rating_numerator, dog_class, favorites, retweets) %>% # the function "select()" returns a subset of the columns in our data frame. Here, we are choosing to plot just the rating numerator, dog_class, favorites, and retweets
pairs()
dplyr::select(DogData.munge, rating_numerator, as.factor(dog_class), favorites, retweets) %>% # the function "select()" returns a subset of the columns in our data frame. Here, we are choosing to plot just the rating numerator, dog_class, favorites, and retweets
pairs()
dplyr::select(DogData.munge, rating_numerator, as.factor(DogData.munge$dog_class), favorites, retweets) %>% # the function "select()" returns a subset of the columns in our data frame. Here, we are choosing to plot just the rating numerator, dog_class, favorites, and retweets
pairs()
c(dplyr::select(DogData.munge, rating_numerator, favorites, retweets),as.factor(DogData.munge$dog_class)) %>% # the function "select()" returns a subset of the columns in our data frame. Here, we are choosing to plot just the rating numerator, dog_class, favorites, and retweets
pairs()
dplyr::select(DogData.munge, rating_numerator, favorites, retweets) %>% # the function "select()" returns a subset of the columns in our data frame. Here, we are choosing to plot just the rating numerator, favorites, and retweets
pairs()
typeof(DogData.munge$date_time)
myd_hm()
?mdy_hm()
mutate(DogData.munge, date_time = mdy_hm(date_time))
typeof(DogData.munge$date_time)
DogData.munge <- mutate(DogData.munge, date_time = mdy_hm(date_time)) # there are different functions depending on how the datetime data are
typeof(DogData.munge$date_time)
plot(retweets~date_time, data = DogData.munge)
plot(rating_numerator~date_time, data = DogData.munge)
plot(favorites~date_time, data = DogData.munge)
?read.csv # Query help for the "read.csv()" function
?read_excel # Query help for the "read_excel()" function
getwd() # Ask what your current working directory is set to
setwd("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/REU_R_workshop2/")
DogData <- read.csv("Dogs.csv", stringsAsFactors=FALSE, na.strings = "") # NOTE that this will OVERWRITE the existing object named "DogData"; the argument 'na.strings = ""' tells R that blank cells should be treated as missing values
rm(list = ls()) # Remove all objects from the R environment in "ls()"
# Remember to write lots of comments! Future you will be grateful!
DogData <- read.csv("C:/Users/Megan/Google Drive (forkm@caryinstitute.org)/REU_R_workshop2/Dogs.csv", stringsAsFactors=FALSE) # Give a name to the object you want this dataset to be called on the left of the arrow, then assign the data to that object name using the "read.csv()" function. The first argument gives the path to the file so R knows where to find it and the second argument tells R whether strings (i.e., stuff that is inside of quotation marks) should be assigned to the class "factor" or not. Notice that, by default, the first row has become the column names:
colnames(DogData)
# Explore classes of columns:
typeof(DogData$text)
typeof(DogData$rating_numerator)
typeof(DogData$date_time)
# First, we'll load a couple of useful packages:
install.packages("tidyverse") # the tidyverse includes a number of different R packages, including 'dplyr' a great package for manipulating, cleaning, and summarizing data. I use the cheat sheet (https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf) ALL THE TIME
library(tidyverse) # load the libraries for this package so that you can use it in this session
# How many observations do we have?
nrow(DogData) # returns the number of rows in a data frame or matrix
# How many observations are missing the Dog's name?
is.na(DogData$name) %>% # the function 'is.na()' returns a vector of logical (i.e., True/False) for each entry in the input that tells you whether the value is NA or not. The pipe operator (" %>% ") lets us feed this output into another function:
which() %>% # Feeding the above into "which()" returns the positions of the "NA" observations
length() # Length returns the number of observations in the vector - i.e., how many cells have 'NA' in them
install.packages("tidyverse")
# First, we'll load a couple of useful packages:
install.packages("tidyverse") # the tidyverse includes a number of different R packages, including 'dplyr' a great package for manipulating, cleaning, and summarizing data. I use the cheat sheet (https://rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf) ALL THE TIME
library(tidyverse) # load the libraries for this package so that you can use it in this session
# How many observations do we have?
nrow(DogData) # returns the number of rows in a data frame or matrix
# How many observations are missing the Dog's name?
is.na(DogData$name) %>% # the function 'is.na()' returns a vector of logical (i.e., True/False) for each entry in the input that tells you whether the value is NA or not. The pipe operator (" %>% ") lets us feed this output into another function:
which() %>% # Feeding the above into "which()" returns the positions of the "NA" observations
length() # Length returns the number of observations in the vector - i.e., how many cells have 'NA' in them
